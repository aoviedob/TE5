'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var isObject = function isObject(obj) {
  return obj !== null && (typeof obj === 'undefined' ? 'undefined' : _typeof(obj)) === 'object';
};

function sheet(locals) {
  if (!isObject(locals)) {
    throw new Error('no locals found');
  }

  var ins = {
    globalClassFor: function globalClassFor() {
      for (var _len = arguments.length, providedClasses = Array(_len), _key = 0; _key < _len; _key++) {
        providedClasses[_key] = arguments[_key];
      }

      var classNames = providedClasses;
      if (classNames.length === 0) {
        throw new Error('please provide some classNames');
      }

      classNames = classNames.reduce(function (seq, cName) {
        if (isObject(cName)) {
          seq = seq.concat(Object.keys(cName).filter(function (key) {
            return !!cName[key];
          })); // eslint-disable-line
        } else {
          seq.push(cName);
        }
        return seq;
      }, []);

      classNames = classNames.join(' ').trim().split(/\s+/);

      return {
        '__className__': classNames.join(' ')
      };
    },
    classFor: function classFor() {
      for (var _len2 = arguments.length, providedClasses = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        providedClasses[_key2] = arguments[_key2];
      }

      var classNames = providedClasses;
      if (classNames.length === 0) {
        throw new Error('please provide some classNames');
      }

      classNames = classNames.map(function (cName) {
        if (isObject(cName)) {
          var _ret = function () {
            if (cName.__className__) {
              // asumming it is an object we created with the globalClassFor
              return {
                v: cName
              };
            }
            var evaluatedClasses = [];
            Object.keys(cName).forEach(function (key) {
              if (cName[key]) {
                evaluatedClasses.push(key);
              }
            });
            return {
              v: evaluatedClasses
            };
          }();

          if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === "object") return _ret.v;
        }
        return cName;
      });

      return classNames.reduce(function (seq, klass) {
        if (isObject(klass) && klass.__className__) {
          seq.push(klass.__className__);
          return seq;
        }

        var _klass = Array.isArray(klass) ? klass : [klass];

        _klass = _klass.join(' ').trim().split(/\s+/).filter(function (entry) {
          return !!entry;
        });

        _klass.forEach(function (localKlass) {
          var className = locals[localKlass];
          if (!className) {
            throw new Error('no local className found for "' + localKlass + '"');
          }

          seq = seq.concat(className); // eslint-disable-line
        });

        return seq;
      }, []).join(' ');
    }
  };

  // aliases for shortener names
  ins.cf = ins.classFor;
  ins.g = ins.globalClassFor;

  return ins;
}

module.exports = sheet;